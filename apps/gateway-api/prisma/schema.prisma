generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPermissions {
  All @map("permissions.all")
}

enum RoleTypes {
  Admin @map("admin")
  User  @map("user")
  Sales @map("sales")
}

model Role {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  type        RoleTypes
  permissions UserPermissions[]

  users User[]

  @@unique([id, type])
  @@map("roles")
}

model Device {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  userId          String  @default(uuid()) @map("user_id") @db.Uuid
  deviceId        String  @map("device_id") @db.Uuid
  hashedResetCode String? 
  user            User?   @relation(fields: [userId], references: [id])

  @@unique([userId, deviceId])
  @@map("devices")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  email     String    @unique
  roleType  RoleTypes @default(User) @map("role_type")
  password  String

  devices Device[]
  booking Booking[]
  role    Role      @relation(fields: [roleId], references: [id])
  roleId  String    @db.Uuid

  @@map("users")
}

model Ticket {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  seatsStock Int    @map("seats_stock")
  price      Int
  type       String

  booking  Booking[]
  flightId String    @map("flight_id") @db.Uuid
  flight   Flight    @relation(fields: [flightId], references: [id])

  @@map("tickets")
}

model Booking {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status String

  ticketId  String      @map("ticket_id") @db.Uuid
  ticket    Ticket      @relation(fields: [ticketId], references: [id])
  userId    String      @map("user_id") @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  passenger Passenger[]

  @@map("bookings")
}

model Passenger {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  firstName String @map("first_name")
  lastName  String @map("last_name")
  passport  String @unique

  bookingId String  @map("booking_id") @db.Uuid
  booking   Booking @relation(fields: [bookingId], references: [id])

  @@map("passengers")
}

model Flight {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  origin      String
  destination String
  departure   DateTime
  arrival     DateTime
  status      String
  price       Int

  tickets Ticket[]
  plane   Plane    @relation(fields: [planeId], references: [id])
  planeId String   @map("plane_id") @db.Uuid

  @@map("flights")
}

model Plane {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  capacity Int
  image    String
  carrier  String

  flights Flight[]

  @@map("planes")
}
