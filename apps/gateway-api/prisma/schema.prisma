generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @unique @default(uuid()) @db.Uuid
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  email        String    @unique
  role         String
  password     String
  refreshToken String?   @map("refresh_token")
  bookings     Booking[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updateAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Ticket {
  id         String    @id @default(uuid()) @db.Uuid
  flightId   String    @map("flight_id") @db.Uuid
  flight     Flight    @relation(fields: [flightId], references: [id])
  seatsStock Int       @map("seats_stock")
  booking    Booking[]
  price      Int
  type       String
  createdAt  DateTime  @default(now()) @map("created_at")
  updateAt   DateTime  @updatedAt @map("updated_at")

  @@map("tickets")
}

model Booking {
  id        String      @id @default(uuid()) @db.Uuid
  status    String
  ticketId  String      @map("ticket_id") @db.Uuid
  ticket    Ticket      @relation(fields: [ticketId], references: [id])
  userId    String      @map("user_id") @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  passenger Passenger[]
  createdAt DateTime    @default(now()) @map("created_at")
  updateAt  DateTime    @updatedAt @map("updated_at")

  @@map("bookings")
}

model Passenger {
  id        String   @id @default(uuid()) @db.Uuid
  bookingId String   @map("booking_id") @db.Uuid
  booking   Booking  @relation(fields: [bookingId], references: [id])
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  passport  String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  @@map("passengers")
}

model Flight {
  id          String   @id @default(uuid()) @db.Uuid
  origin      String
  destination String
  plane       Plane    @relation(fields: [planeId], references: [id])
  departure   DateTime
  arrival     DateTime
  tickets     Ticket[]
  status      String
  price       Int
  planeId     String   @map("plane_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updateAt    DateTime @updatedAt @map("updated_at")

  @@map("flights")
}

model Plane {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  capacity  Int
  image     String
  carrier   String
  flights   Flight[]
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  @@map("planes")
}
